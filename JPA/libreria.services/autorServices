package libreria.servicios;

import java.util.Collection;
import libreria.entidades.Autor;
import libreria.persistencia.AutorDAO;

public class AutorServices {

    private final AutorDAO daoAutor;

    public AutorServices(AutorDAO daoAutor) {
        this.daoAutor = daoAutor;
    }

    public AutorServices() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public Autor crearAutor(Integer id, String nombre, boolean alta) {
        Autor autor = new Autor();
        try {
            autor.setAlta(alta);
            autor.setId(id);
            autor.setNombre(nombre);
            return autor;
        } catch (Exception e) {
            System.out.println("No se guardo el autor correctamente" + e.getMessage());
            return null;
        }
    }
    
    public void modificarNombreAutor(String nombre, String nombreNuevo) {
        try {
            Autor autor= buscarAutorPorNombre(nombre);
            autor.setNombre(nombreNuevo);
            daoAutor.modificarAutor(autor);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public void eliminarAutor(String nombre) throws Exception {

        try {
            //Validamos 
            if (nombre == null || nombre.trim().isEmpty()) {
                throw new Exception("Debe indicar el nombre");
            }
            daoAutor.eliminarAutor(nombre);
            System.out.println("AUTOR ELIMINADO CON EXITO");
        } catch (Exception e) {
            throw e;
        }
    }

    public Autor buscarAutorPorId(Integer id) throws Exception {

        try {
            //Validamos
            if (id == null) {
                throw new Exception("Debe indicar el id del usuario");
            }
            Autor autor = daoAutor.buscarAutorPorId(id);
            return autor;
        } catch (Exception e) {
            throw e;
        }
    }

    public Autor buscarAutorPorNombre(String nombre) throws Exception {

        try {
            //Validamos
            if (nombre == null | nombre.trim().isEmpty()) {
                throw new Exception("Debe indicar el nombre");
            }
            Autor autor = daoAutor.buscarAutorPorNombre(nombre);
            return autor;
        } catch (Exception e) {
            throw e;
        }
    }
    
     public Collection<Autor> listarAutores() throws Exception {

        try {
            Collection<Autor> autores = daoAutor.listarAutores();
            return autores;
        } catch (Exception e) {
            throw e;
        }
    }

    public void imprimirAutores() throws Exception {
        try {
            Collection<Autor> autores = listarAutores();

            if (autores.isEmpty()) {
                throw new Exception("No existen autores para imprimir");
            } else {
                autores.forEach(u -> {
                    System.out.println(u);
                });
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
